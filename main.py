import telebot
from config import TOKEN, STAFF_CHAT_ID
import json
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

bot = telebot.TeleBot(TOKEN)

user_data = {}

# Load questions from a JSON file
def load_questions():
    with open("questions.json", "r", encoding="utf-8") as f:
        return json.load(f)

questions = load_questions()

# Welcome message
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    quiz_button = KeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
    info_button = KeyboardButton("–£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏")
    markup.add(quiz_button, info_button)

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏.",
        reply_markup=markup
    )

# Start quiz (via command or button)
@bot.message_handler(commands=['quiz'])
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
def start_quiz(message):
    user_data[message.chat.id] = {"current_question": 0, "total_score": 0}
    send_question(message.chat.id)

# Send a quiz question
def send_question(chat_id):
    user_info = user_data.get(chat_id)
    if not user_info or "current_question" not in user_info:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        return

    if user_info["current_question"] < len(questions):
        question = questions[user_info["current_question"]]
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for option in question["options"]:
            markup.add(option)
        bot.send_message(chat_id, question["question"], reply_markup=markup)
    else:
        send_result(chat_id)


# Handle quiz answers
@bot.message_handler(func=lambda message: message.chat.id in user_data)
def handle_answer(message):
    user_info = user_data[message.chat.id]

    if user_info["current_question"] < len(questions):
        question = questions[user_info["current_question"]]
        if message.text in question["options"]:
            index = question["options"].index(message.text)
            user_info["total_score"] += question["scores"][index]
            user_info["current_question"] += 1
            send_question(message.chat.id)
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    else:
        send_result(message.chat.id)


# Show quiz result
def send_result(chat_id):
    if chat_id not in user_data:
        return

    score = user_data[chat_id]["total_score"]
    if score <= 5:
        result = "–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - –£—à–∞—Å—Ç—ã–π —ë–∂!"
        image_path = "images/hedgehog.jpeg"
    elif score <= 8:
        result = "–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è –õ–∏—Å–∏—Ü–∞!"
        image_path = "images/fox.jpg"
    else:
        result = "–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - –ú–∞–ª–∞–π—Å–∫–∏–π –ú–µ–¥–≤–µ–¥—å!"
        image_path = "images/bear.jpg"

    with open(image_path, "rb") as photo:
        bot.send_photo(chat_id, photo)

    show_result(chat_id, result)

# Display result and offer retry
def show_result(chat_id, result):
    bot.send_message(chat_id, result)

    share_markup = InlineKeyboardMarkup()

#Telegram
    telegram_button = InlineKeyboardButton(
        text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram",
        url=f"https://t.me/share/url?url=https://t.me/{bot.get_me().username}&text={result}"
    )
    share_markup.add(telegram_button)

#WhatsApp
    whatsapp_button = InlineKeyboardButton(
        text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ WhatsApp",
        url=f"https://api.whatsapp.com/send?text={result}%20https://t.me/{bot.get_me().username}"
    )
    share_markup.add(whatsapp_button)

#Facebook
    facebook_button = InlineKeyboardButton(
        text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Facebook",
        url=f"https://www.facebook.com/sharer/sharer.php?u=https://t.me/{bot.get_me().username}&quote={result}"
    )
    share_markup.add(facebook_button)

#Twitter
    twitter_button = InlineKeyboardButton(
        text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Twitter",
        url=f"https://twitter.com/intent/tweet?text={result}&url=https://t.me/{bot.get_me().username}"
    )
    share_markup.add(twitter_button)

#Send message with buttons
    bot.send_message(
        chat_id,
        "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö?",
        reply_markup=share_markup
    )

    retry_markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    retry_markup.add("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", "–£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–∞")
    bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=retry_markup)

# #delete user data
#     del user_data[chat_id]

# Retry quiz
@bot.message_handler(func=lambda message: message.text == "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑")
def retry_quiz(message):
    start_quiz(message)

# Provide information about adoption program
@bot.message_handler(commands=['about'])
@bot.message_handler(func=lambda message: message.text == "–£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏")
def send_about_info(message):
    about_text = (
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∑–æ–æ–ø–∞—Ä–∫–∞. "
        "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º –ª—é–±–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ–≥–æ. "
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.\n\n"
        "üëâ [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏](https://example.com/adoption)\n"
        "üëâ [–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º, –Ω–∞–ø–∏—à–∏ –Ω–∞–º! zoofriends@moscowzoo.ru]\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è"
    )
    bot.send_message(message.chat.id, about_text, parse_mode="Markdown")

#Contact stuff
@bot.message_handler(func=lambda message: message.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–∞")
def contact_staff(message):
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. "
        "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å, —Å –∫–∞–∫–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º —Å–≤—è–∑–∞–Ω –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    )
    bot.register_next_step_handler(message, forward_to_staff)

def forward_to_staff(message):
    user_result = user_data.get(message.chat.id, {}).get("total_score", "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    result_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}:\n"
    result_text += f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {user_result}\n"
    result_text += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"

#Send message to staff
    bot.send_message(STAFF_CHAT_ID, result_text)
    bot.reply_to(message, "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –°–ø–∞—Å–∏–±–æ!")
    if message.chat.id in user_data:
        del user_data[message.chat.id]


# Collect user feedback
@bot.message_handler(commands=['feedback'])
def feedback_handler(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!")
    bot.register_next_step_handler(message, save_feedback)

def save_feedback(message):
    with open("feedback.txt", "a", encoding="utf-8") as f:
        f.write(f"–û—Ç {message.chat.id}: {message.text}\n")
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

# Start the bot
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω....")
    bot.infinity_polling()
